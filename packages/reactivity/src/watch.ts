/**
 * 1. ÁõëÂê¨Êï¥‰∏™ÂØπË±° üÜó
 * 2. ÊîØÊåÅ‰º†ÂÖ•getterÂáΩÊï∞ÔºåËá™ÂÆö‰πâÁõëÂê¨ÁöÑÂ≠óÊÆµ üÜó
 * *  ÁõëÂê¨ÂØπË±°ÊîØÊåÅref„ÄÅreactive„ÄÅgetterÔºåÂèäÂ§ö‰∏™ÂâçÈù¢ÂØπË±°ÁªÑÊàêÁöÑÊï∞ÁªÑ üÜó
 * 3. callbackÊâßË°åÊó∂ËÉΩÂ§üÊãøÂà∞oldValue„ÄÅnewValue üÜó
 * 4. ÊîØÊåÅoptionsÊéßÂà∂Á´ãÂç≥ÊâßË°å‰º†ÂÖ•ÁöÑÊâßË°åÂáΩÊï∞ üÜó
 * 5. ÊîØÊåÅoptionsÊéßÂà∂ÂõûË∞ÉÂáΩÊï∞ÁöÑÊâßË°åÊó∂Êú∫ÔºåÊòØÁõ¥Êé•ÊâßË°åËøòÊòØÂæÆ‰ªªÂä°ÊâßË°å üÜó
 * 6. ÊîØÊåÅÂâØ‰ΩúÁî®ÂáΩÊï∞Ôºåcallback‰∏≠ÂèØÂú®Á¨¨‰∏â‰∏™ÂèÇÊï∞Êé•Âèó üÜó
 */

import { effect } from "./effect";
import { isRef } from "./ref";

 // getterÁöÑÁîüÊàêÈÄªËæë
 const getterCreator = (be_monitored_boy) => {
   if ( typeof be_monitored_boy === 'function' ) {
     return be_monitored_boy;
   } else if( isRef(be_monitored_boy) ) {
     return () => be_monitored_boy.value;
   } else if ( Array.isArray( be_monitored_boy ) ) {
     const getters = be_monitored_boy.map( item => {
       return getterCreator( item );
     })
     return () => {
       getters.forEach( getter => getter() )
     }
   } else {
     return () => traverse(be_monitored_boy)
   }
 }
 
 // ÈÅçÂéÜÂØπË±°Ôºå‰∏î‰ΩøÁî®ÊØè‰∏™Â≠óÊÆµÁöÑÂÄº
 const traverse = (params, seen = new Set()) => {
   // Â¶ÇÊûúÂΩìÂâçÁöÑÂèÇÊï∞ÊòØ‰∏™ÂéüÂßãÂÄºÊàñËÄÖÊ≤°ÊúâÂÄºÔºåÈÇ£Â∞±‰∏çË¶ÅÂÜçÁªßÁª≠ÈÅçÂéÜ‰∫Ü
   if( typeof params !== "object" || params === null || seen.has(params)) return ;
   // Ê†áËÆ∞Â∑≤ËØª
   seen.add(params)
   // for inÈÅçÂéÜ
   for (const key in params) {
     traverse(params[key], seen)
   }
   return params;
 }
 
 // watchÂäüËÉΩ
 export const watch = (be_monitored_boy, callback, options?) => {
   // ÁîüÊàêgetter
   let getter = getterCreator(be_monitored_boy);
   let oldValue,newValue;
   let cleanup;
 
   const onInvalidate = (exec) => {
     cleanup = exec;
   }
 
   const job = () => {
     newValue = runner();
     if ( cleanup ) {
       cleanup();
     }
     callback(oldValue, newValue, onInvalidate);
     oldValue = newValue;
   }
   // ÁªëÂÆö‰æùËµñ
   const runner = effect(getter, {
     scheduler(){
       if ( options?.flush === "post" ) {
         let p = Promise.resolve();
         p.then( job )
       } else {
         job();
       }
     }
   })
   if( options?.immediately ){
     job();
   }else{
     oldValue = runner();
   }
 }
